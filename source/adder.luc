module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    
    rca rca(#SIZE(SIZE)) //instantiate 32-bit Ripple Carry Adder
    sig xb[SIZE]
    always {

        xb[SIZE-1:0] = b ^ (SIZE x{alufn_signal[0]}) //xb is the product of the XOR gate of b and 32 bits of the 0th bit of alfun signal
        
        //inputs of Ripple Carry Adder
        rca.a = a
        rca.b = xb
        rca.cin = alufn_signal[0]
        
        
        // implement adder/subtractor unit logic here
        out = rca.s
        z = ~| rca.s // NOR gate for sum 
        v = (a[SIZE-1]& xb[SIZE-1] & ~rca.s[SIZE-1]) | (~a[SIZE-1]& ~xb[SIZE-1] & rca.s[SIZE-1]) //logic for overflow calculation
        n = rca.s[SIZE-1] // checks MSB for negative value

        
    }
}