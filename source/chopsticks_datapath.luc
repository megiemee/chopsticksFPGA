module chopsticks_datapath #(
    SLOW_CLOCK_DIV ~21 : SLOW_CLOCK_DIV >0,
    CLOCK_DIVIDER ~26 : CLOCK_DIVIDER>0
)(
    // Building of Datapath, this should be roughly be right, all the necessary connections are made
    //Inputs and outputs are external now, meaning the inputs are going to be from button presses and outputs are going to the LEDs to be displayed
    input p1l_button,
    input p1r_button,
    input p2r_button,
    input p2l_button,
    input blackoutbutton,
    input start,
    input p1split,
    input p2split,
    input clk,  // clock
    input rst,  // reset
    output p1l_score_out[32],
    output p1r_score_out[32],
    output p2l_score_out[32],
    output p2r_score_out[32],
    output p1l_avail[32],
    output p1r_avail[32],
    output p2l_avail[32],
    output p2r_avail[32],
    output timer_led_out [32],
    output debugging[4],
    output slow_clock_out[4],
    output curr_player[32],
    output change_mode,
    output start_mode
) {

    alu_expandedwithmuxes game_alu
    //sig tempsig
    
    
    .clk(clk){
        // Using of counter module to count down, 
        counter slow_clock(#SIZE(1),#DIV(SLOW_CLOCK_DIV),#UP(1),.rst(rst))
        counter rnger(#SIZE(1), #DIV(CLOCK_DIVIDER),.rst(rst))
        random_number_generator generator(.slow_clk(rnger.value), .refresh(rst))
        
        edge_detector edge_detector_slow_clk_edge(#RISE(1),#FALL(0),.in(slow_clock.value))
        
        
        //instantiating the FSM and connecting the inputs of the FSM to inputs of datapath
        chopsticks_fsm chopsticks_fsm(
            .p1l_button(p1l_button),
            .p1r_button(p1r_button),
            .p2l_button(p2l_button),
            .p2r_button(p2r_button),
            .p1split(p1split),
            .p2split(p2split),
            .blackoutrate(blackoutbutton),
            .slowclk(edge_detector_slow_clk_edge.out),
            .rst(rst),
            .start(start),
            .rng(generator.out[0]))
        
       black_out black_out(.difficulty(chopsticks_fsm.difficulty),.rst(rst),.pulse(chopsticks_fsm.pulse))     
        
        //instantiating the REGFILE and connecting the inputs of the REGFILE to inputs of datapath
        game_regfiles game_regfiles(
            .we(chopsticks_fsm.regfile_we),
            .wa(chopsticks_fsm.regfile_wa),
            .ra1(chopsticks_fsm.regfile_ra1),
            .ra2(chopsticks_fsm.regfile_ra2),
            .rst(rst))
            
        dff black[4](#INIT(0),.rst(rst))

            
        
    }
    led_encoder led_code(.p1l(game_regfiles.p1l_score_out),
    .p1r(game_regfiles.p1r_score_out),.p2l(game_regfiles.p2l_score_out),
    .p2r(game_regfiles.p2r_score_out))
    
    always {
        if(rst){
            black.d = 0
        }
        black.d = black.q + black_out.out
        // connecting the regfile RD2 to the FSM
        chopsticks_fsm.regfile_rd2 = game_regfiles.rd2
        change_mode = chopsticks_fsm.difficulty
        start_mode = chopsticks_fsm.start_led
        
        
        //connecting the regfile and fsm outputs to the ALU section
        game_alu.rd1 = game_regfiles.rd1
        game_alu.rd2 = game_regfiles.rd2
        game_alu.asel = chopsticks_fsm.asel   
        game_alu.bsel = chopsticks_fsm.bsel
        game_alu.wdsel = chopsticks_fsm.wdsel
        game_alu.alufn_Signal = chopsticks_fsm.alufn
        
        
        //connecting the write data of regfile to the output of the alu 
        game_regfiles.data = game_alu.alu_output
        
        //connect output of datapath with outputs from the regfile
        p1l_score_out = led_code.p1l_light
        p1r_score_out = led_code.p1r_light
        p2l_score_out = led_code.p2l_light 
        p2r_score_out = led_code.p2r_light
        p1l_avail = game_regfiles.p1l_avail_out 
        p1r_avail = game_regfiles.p1r_avail_out 
        p2l_avail = game_regfiles.p2l_avail_out 
        p2r_avail = game_regfiles.p2r_avail_out 
        timer_led_out = game_regfiles.timer_out 
        debugging = chopsticks_fsm.debug
        curr_player = game_regfiles.curr_player
        slow_clock_out = black.q 
        
        
        if((led_code.p1l_light == 31 && led_code.p1r_light == 31)|(led_code.p2l_light == 31 && led_code.p2r_light == 31)){
        p1l_score_out = led_code.p1l_light
        p1r_score_out = led_code.p1r_light
        p2l_score_out = led_code.p2l_light 
        p2r_score_out = led_code.p2r_light
        p1l_avail = game_regfiles.p1l_avail_out 
        p1r_avail = game_regfiles.p1r_avail_out 
        p2l_avail = game_regfiles.p2l_avail_out 
        p2r_avail = game_regfiles.p2r_avail_out 
        timer_led_out = game_regfiles.timer_out 
        debugging = chopsticks_fsm.debug
        curr_player = game_regfiles.curr_player
        slow_clock_out = black.q 
        }
        else if(black.q == 5){
            black.d = 0
        }
        else if(black.q == 4){
        p1l_score_out = 0
        p1r_score_out = 0
        p2l_score_out = 0
        p2r_score_out = 0
        p1l_avail = game_regfiles.p1l_avail_out 
        p1r_avail = game_regfiles.p1r_avail_out 
        p2l_avail = game_regfiles.p2l_avail_out 
        p2r_avail = game_regfiles.p2r_avail_out 
        timer_led_out = game_regfiles.timer_out 
        debugging = chopsticks_fsm.debug
        curr_player = game_regfiles.curr_player
        slow_clock_out = black.q 
        }
        else{
        p1l_score_out = led_code.p1l_light
        p1r_score_out = led_code.p1r_light
        p2l_score_out = led_code.p2l_light 
        p2r_score_out = led_code.p2r_light
        p1l_avail = game_regfiles.p1l_avail_out 
        p1r_avail = game_regfiles.p1r_avail_out 
        p2l_avail = game_regfiles.p2l_avail_out 
        p2r_avail = game_regfiles.p2r_avail_out 
        timer_led_out = game_regfiles.timer_out 
        debugging = chopsticks_fsm.debug
        curr_player = game_regfiles.curr_player
        slow_clock_out = black.q 
        }
        
        
    }
}




































































































































